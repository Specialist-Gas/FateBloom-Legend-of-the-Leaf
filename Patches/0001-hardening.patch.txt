diff --git a/core/settings.py b/core/settings.py
index 0000000..0000000 100644
--- a/core/settings.py
+++ b/core/settings.py
@@ -1,28 +1,44 @@
 # Debug menu UI
 DEBUG_MENU_WIDTH = 280
 DEBUG_MENU_ALPHA = 180  # 0..255 translucency
 
 
 # ===== Window / UI / Camera (your existing settings stay the same) =====
 WIDTH, HEIGHT = 1280, 720
 FPS = 60
 TITLE = "Floral Foundations â€“ RS-style UI + Camera"
 
 PANEL_WIDTH = 320
 PANEL_RECT = (WIDTH - PANEL_WIDTH, HEIGHT // 2, PANEL_WIDTH, HEIGHT // 2)
 WORLD_RECT = (0, 0, WIDTH - PANEL_WIDTH, HEIGHT)
 RADAR_RECT = (WIDTH - PANEL_WIDTH, 0, PANEL_WIDTH, HEIGHT // 2)
 
 TILE_SIZE = 64
 TILESET_PATH = "assets/tilesets/grass.png"
 GROUND_TILE_COORDS = (1, 1)
 DEBUG_TILES = True
 
 WORLD_W, WORLD_H = 3072, 2048
 
 CAMERA_ZOOM = 2.0
 CAMERA_LERP = 0.15
 
 BLACK  = (0, 0, 0)
 WHITE  = (255, 255, 255)
 DARK   = (32, 32, 36)
 LIGHT  = (200, 200, 210)
 ACCENT = (120, 220, 230)
 
 # ===== Debug =====
 DEBUG_COMBAT = False  # set True to see melee hitboxes etc.
 
 # ===== Player Combat =====
 PLAYER_MAX_HP      = 100
 PLAYER_INVULNERABLE_TIME = 0.60   # seconds of invulnerability after being hit
 
 # ===== Enemy AI/Combat =====
 ENEMY_SPEED            = 120    # px/s
 ENEMY_DETECT_RADIUS    = 900    # start chasing within this distance
 ENEMY_ATTACK_DAMAGE    = 12
 ENEMY_ATTACK_COOLDOWN  = 0.60   # seconds between hits per enemy
 ENEMY_ATTACK_RANGE     = 28     # if closer than this OR rect-colliding -> damage
 
 # Game states
 STATE_PLAYING = "PLAYING"
 STATE_PAUSED  = "PAUSED"
 STATE_GAME_OVER = "GAME_OVER"
-STATE_WIN = "WIN"           # <-- add this
+STATE_WIN = "WIN"
+
+# ===== Feature Flags (safe defaults) =====
+# Use these to gate experimental work so the main loop remains stable.
+ENABLE_EXPERIMENTAL_AUDIO = False
+ENABLE_BEAM_SPELL = False
+
+# ===== Contracts =====
+# Spells that gameplay code is allowed to reference by name.
+ALLOWED_SPELLS = {"spark"}
diff --git a/world/test_level.py b/world/test_level.py
index 0000000..0000000 100644
--- a/world/test_level.py
+++ b/world/test_level.py
@@ -1,15 +1,16 @@
 # world/test_level.py
 import math
 from pathlib import Path
 import random
 import pygame
 
 from core import settings as S
 from world.player import Player
 from world.camera import Camera
 from world.enemy import Enemy
 from world.projectile import Projectile
 
@@
     def handle_world_click(self, screen_pos, selected_spell):
         """Left-click in world: click-to-target; cast only if cursor is on the current target."""
-        if not selected_spell or self.player.dead:
+        # Contract: only None or a whitelisted spell may be selected.
+        assert (selected_spell is None) or (selected_spell in S.ALLOWED_SPELLS), \
+            f"Unknown spell selected: {selected_spell!r}. Allowed: {sorted(S.ALLOWED_SPELLS)}"
+        if not selected_spell or self.player.dead:
             return
         world_xy = self.screen_to_world(screen_pos)
         if world_xy is None:
             return
@@
         # projectiles (hits)
-        for p in list(self.projectiles):
+        for p in list(self.projectiles):
             p.update(dt)
             hit_any = False
             for enemy in list(self.enemy_sprites):
                 if p.rect.colliderect(enemy.rect):
                     enemy.hp -= p.damage
                     hit_any = True
                     if enemy.hp <= 0:
                         self.enemy_sprites.remove(enemy)
                         if enemy in self.enemies: self.enemies.remove(enemy)
                         if self.current_target is enemy:
                             self.current_target = None
                     break
-            if hit_any or not p.alive():
-                self.projectiles.remove(p)
+            # Single exit: remove once, no duplicates, no zombie projectiles.
+            if hit_any or not p.alive():
+                try:
+                    self.projectiles.remove(p)
+                except ValueError:
+                    pass  # already removed elsewhere; keep loop resilient
diff --git a/scenes/spells.py b/scenes/spells.py
index 0000000..0000000 100644
--- a/scenes/spells.py
+++ b/scenes/spells.py
@@
-from ui.window import Window
-from ui.button import Button
+from ui.window import Window
+from ui.button import Button
+from core import settings as S
@@
     def select_spark(self):
         # Set the currently selected spell on the Game
-        self.game.selected_spell = "spark"
+        assert "spark" in S.ALLOWED_SPELLS, "Spark must appear in S.ALLOWED_SPELLS"
+        self.game.selected_spell = "spark"
         self.game.log("Spark selected")
